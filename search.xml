<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2020/12/13/text/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">这里需要密码。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="87a3f27a09697f99fd891312f9ea18068000d5c2582e1dc3e6f62ee532c56605">165d50f05814027fb7fe5e4ae8a088d87ada3ed66f7766990c916a8839f4f3cf807d4754ed27dd03fb4cd43a154f4d5b</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>测试</category>
        <category>test</category>
      </categories>
      <tags>
        <tag>testTag1</tag>
        <tag>testTag2</tag>
      </tags>
  </entry>
  <entry>
    <title>实现网站文章加密</title>
    <url>/2020/12/21/%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h3 id="安装encrypt插件"><a href="#安装encrypt插件" class="headerlink" title="安装encrypt插件"></a>安装encrypt插件</h3><p>1.在博客目录下执行下面的指令安装encrypt</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">cnpm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save hexo-blog-encrypt</span><br></code></pre></td></tr></table></figure>
<p>2.安装完成后，在package.json文件的dependecies依赖中可以看到encrypt插件，证明安装成功</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">    <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;hexo-blog-encrypt&quot;</span>: <span class="hljs-string">&quot;^3.0.13&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="加密文章设置-password属性"><a href="#加密文章设置-password属性" class="headerlink" title="加密文章设置(password属性)"></a>加密文章设置(password属性)</h3><p>1.将”password”字段添加到文章信息头部</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: 博客标题<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2020</span>-<span class="hljs-number">11</span>-<span class="hljs-number">07</span> <span class="hljs-number">23</span>:<span class="hljs-number">05</span>:<span class="hljs-number">38</span><br><span class="hljs-attribute">password</span>: <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure>
<h3 id="执行hexo-g-amp-amp-hexo-s后，便可查看"><a href="#执行hexo-g-amp-amp-hexo-s后，便可查看" class="headerlink" title="执行hexo g&amp;&amp;hexo s后，便可查看"></a>执行hexo g&amp;&amp;hexo s后，便可查看</h3><p><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/rBA8ER.jpg"><br>1.输入密码错误后，界面提示<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/rBAKvF.jpg"></p>
<h3 id="对要加密的文章-，修改文章信息头如下"><a href="#对要加密的文章-，修改文章信息头如下" class="headerlink" title="对要加密的文章 ，修改文章信息头如下"></a>对要加密的文章 ，修改文章信息头如下</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br><span class="hljs-attr">abstract:</span> <span class="hljs-string">这里有东西被加密了，需要输入密码查看哦。</span><br><span class="hljs-attr">message:</span> <span class="hljs-string">您好，这里需要密码。</span><br><span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">抱歉，这个密码看着不太对，请再试试。</span><br><span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。</span><br></code></pre></td></tr></table></figure>
<h3 id="encrypt具体配置文件"><a href="#encrypt具体配置文件" class="headerlink" title="encrypt具体配置文件"></a>encrypt具体配置文件</h3><p>1.文件位于blog\node_modules\hexo-blog-encrypt下，可自行修改配</p>
<h3 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h3><p>1.有错误请评论指出，谢谢，希望文章能够帮助到烂记性的自己和正在观看此博客的你。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>添加网站访问统计</title>
    <url>/2020/12/21/%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h3 id="修改fluid主题配置文件"><a href="#修改fluid主题配置文件" class="headerlink" title="修改fluid主题配置文件"></a>修改fluid主题配置文件</h3><p>1.进入fluid主题下的配置文件(<code>config.yml</code>)<br>2.找到页脚footer部分配置<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/r0jIED.jpg"><br>3.往下翻，找到 <code>statistics</code> 的配置，将 <code>enable</code> 的值改为 <code>true</code> 即可<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/r0jHCd.jpg"></p>
<h3 id="可能会发生的问题以及解决方法"><a href="#可能会发生的问题以及解决方法" class="headerlink" title="可能会发生的问题以及解决方法"></a>可能会发生的问题以及解决方法</h3><p>1.初始统计数值过大，此为正常现在，在本地访问时，你看到的数值将会是这样，你只需要提交到github仓库或者是你的服务器上即可解决这个问题<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/r0joUe.jpg"><br>2.访问量与访客数同比增加，刷新一次加一次访客数，这是不应该发生的<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/r0j4HO.jpg"></p>
<p>3.我们需要让他统计ip，同一个ip访问，将只增加访问量，不增加访客数才是正常的<br>4.这可能是因为，浏览器在2020.1月已经不支持http的资源加载了，只要将你的网站开启https访问即可<br>5.这里演示你的博客是建立在github上的情况，在你自己的服务器上，百度如何开启https访问即可</p>
<ul>
<li>第一步登录github，<a href="https://github.com/">点击登录</a></li>
<li>点击你存放博客的仓库</li>
<li>点击<code>settings</code></li>
<li><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/r0jT4H.jpg"></li>
<li>划到最底部，将https这个选择选中即可</li>
<li><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/r0jb8A.jpg"></li>
</ul>
<p>6.这样就可以解决这个问题</p>
<h3 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h3><p>1.有错误请评论指出，谢谢，希望文章能够帮助到烂记性的自己和正在观看此博客的你。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的添加网站运行时间</title>
    <url>/2020/12/21/%E7%AE%80%E5%8D%95%E7%9A%84%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h3 id="修改footer-ejs文件"><a href="#修改footer-ejs文件" class="headerlink" title="修改footer.ejs文件"></a>修改footer.ejs文件</h3><p>1.文件位于themes/fluid/layout/partial ,你只需要在里面加一个div标签就可以了，里面原本是有两个div标签，你放的顺序影响着显示的顺序。直接将下列代码复制即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> <br><span class="javascript">        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); </span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createtime</span>(<span class="hljs-params"></span>)</span>&#123; </span><br><span class="javascript">            <span class="hljs-keyword">var</span> grt= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;10/01/2020 8:00:00&quot;</span>);<span class="hljs-comment">//此处修改你的建站时间或者网站上线时间             now.setTime(now.getTime()+250); </span></span><br>           days = (now - grt ) / 1000 / 60 / 60 / 24; <br><span class="javascript">           dnum = <span class="hljs-built_in">Math</span>.floor(days); </span><br>           hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); <br><span class="javascript">           hnum = <span class="hljs-built_in">Math</span>.floor(hours); </span><br><span class="javascript">           <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(hnum).length ==<span class="hljs-number">1</span> )&#123; </span><br><span class="javascript">           hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum; </span><br>           &#125; <br>           minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); <br><span class="javascript">           mnum = <span class="hljs-built_in">Math</span>.floor(minutes); i</span><br><span class="javascript">           <span class="hljs-function"><span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>(mnum).length ==<span class="hljs-number">1</span> </span>)</span>&#123; </span><br><span class="javascript">           mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum; </span><br>           &#125; <br>           seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); <br><span class="javascript">           snum = <span class="hljs-built_in">Math</span>.round(seconds); </span><br><span class="javascript">           <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(snum).length ==<span class="hljs-number">1</span> )&#123; </span><br><span class="javascript">           snum = <span class="hljs-string">&quot;0&quot;</span> + snum; </span><br>           &#125; <br><span class="javascript">           <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;timeDate&quot;</span>).innerHTML = <span class="hljs-string">&quot;本站已经运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>; </span><br><span class="javascript">           <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;times&quot;</span>).innerHTML = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒啦~~&quot;</span>; </span><br>           &#125; <br><span class="javascript">           <span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;createtime()&quot;</span>,<span class="hljs-number">250</span>);           </span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h3><p>1.有错误请评论指出，谢谢，希望文章能够帮助到烂记性的自己和正在观看此博客的你。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>js</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>网站添加valine评论</title>
    <url>/2020/12/21/%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0valine%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<h3 id="修改fluid主题配置文件"><a href="#修改fluid主题配置文件" class="headerlink" title="修改fluid主题配置文件"></a>修改fluid主题配置文件</h3><p>1.进入fluid主题下的配置文件(config.yml)<br>2.找到comments配置，将enable的值改为true，type的值改为valine<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/rBKy3n.jpg"><br>3.往下划，找到valine的配置，可见appid与appkey以及serverURLs此3处留空<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/2.jpg"></p>
<h3 id="前网官网注册获取appid与appkey以及serverURLs"><a href="#前网官网注册获取appid与appkey以及serverURLs" class="headerlink" title="前网官网注册获取appid与appkey以及serverURLs"></a>前网官网注册获取appid与appkey以及serverURLs</h3><p><a href="https://leancloud.cn/dashboard/login.html#/signup">点击前往注册LeanCloud</a><br>1.注册完毕后，进入控制台后点击左下角创建应用<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/3.png"><br>2.应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了，下面可找到serverURLs<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/4.png"><br>3.为了你的数据安全，请设置自己的安全域名，此操作时防止他人进入你的网站查看源码看见你的id和key然后使用你的，设置安全域名后，只有你设置的域名才可以使用该id与key<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/5.png"></p>
<h3 id="返回配置文件，将3个留空处填上得到的3个值即可"><a href="#返回配置文件，将3个留空处填上得到的3个值即可" class="headerlink" title="返回配置文件，将3个留空处填上得到的3个值即可"></a>返回配置文件，将3个留空处填上得到的3个值即可</h3><p>1.将得到的值填上<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/2.jpg"><br>2.重启hexo即可<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br><code>hexo s</code></p>
<h3 id="评论的管理"><a href="#评论的管理" class="headerlink" title="评论的管理"></a>评论的管理</h3><p>1.由于Valine 是无后端评论系统，所以也就没有开发评论数据管理功能。请自行登录Leancloud应用管理。<br>2.具体步骤：登录&gt;选择你创建的应用&gt;存储&gt;选择Class&gt;Comment，然后就可以尽情的发挥你的权利</p>
<h3 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h3><p>1.有错误请评论指出，谢谢，希望文章能够帮助到烂记性的自己和正在观看此博客的你。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让谷歌收录你的网站</title>
    <url>/2021/01/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%B0%B7%E6%AD%8C%E6%94%B6%E5%BD%95%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，只有提交搜索引擎之后，搜索引擎才能收录你的站点，通过爬虫抓取你网站的东西。</p>
<h3 id="步骤一-修改config-yml下的url"><a href="#步骤一-修改config-yml下的url" class="headerlink" title="步骤一:修改config.yml下的url"></a>步骤一:修改config.yml下的url</h3><p>在hexo根目录的_config.yml文件，找到url，将url的值改为自己的域名</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">url:</span> 域名<br>例如：<span class="hljs-attr">url:</span> <span class="hljs-attr">https:</span><span class="hljs-comment">//www.zyxlfl.top</span><br></code></pre></td></tr></table></figure>
<h3 id="步骤二-生成sitemap"><a href="#步骤二-生成sitemap" class="headerlink" title="步骤二: 生成sitemap"></a>步骤二: 生成sitemap</h3><p>1.首先我们要使用git键入以下命令生成一个网站地图：<br>2.两种方式任选其一，第一种方式报错则使用第二种</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-generator-sitemap <span class="hljs-comment">--save</span><br>cnpm <span class="hljs-keyword">install</span> hexo-generator-sitemap <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>
<h3 id="步骤三-修改-config-yml文件"><a href="#步骤三-修改-config-yml文件" class="headerlink" title="步骤三:修改_config.yml文件"></a>步骤三:修改_config.yml文件</h3><p>1.在hexo根目录的_config.yml文件添加以下内容：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 自动生成sitemap</span><br><span class="hljs-symbol">sitemap:</span><br><span class="hljs-symbol">  path:</span> sitemap.xml<br></code></pre></td></tr></table></figure>
<p>2.然后使用git工具hexo g生成一下，接着hexo d上传部署即可<br>3.此时，进入 public 目录，你会发现里面有 sitemap.xml文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这个文件来抓取网站页面</p>
<h3 id="步骤四-进入谷歌站长工具配置（需要科学上网）"><a href="#步骤四-进入谷歌站长工具配置（需要科学上网）" class="headerlink" title="步骤四:进入谷歌站长工具配置（需要科学上网）"></a>步骤四:进入谷歌站长工具配置（需要科学上网）</h3><p>1.现在我们需要将网站提交谷歌搜索引擎搜索，进入谷歌站长平台，（需要科学上网）点击跳转：<a href="https://goo.gle/searchconsole">searchconsole</a>登录你的谷歌账号之后会让你验证网站所有权：<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/sZKVtH.jpg"><br>2.选择第一个，填入你的域名，子域名部分（例如：zyxlfl.top）<br>3.确定之后会给你一个 TXT 的记录值，复制它到你域名 DNS 增加一个 TXT 记录，点击验证即可<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/sZQopd.jpg"><br>4.前往域名控制台域名解析处配置，将TXT值复制到记录值处<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/sZMp5Q.jpg"><br>5.配置完毕即可<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/sZMSUg.jpg"><br>6.之后我们点击站点地图，随后在添加新的站点地图中将sitemap.xml的位置填上去，点击提交即可<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/sZlEAU.jpg"><br>7.位置为：域名/sitemap.xml，例如我的是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.zyxlfl</span><span class="hljs-selector-class">.top</span>/<span class="hljs-selector-tag">sitemap</span><span class="hljs-selector-class">.xml</span><br></code></pre></td></tr></table></figure>
<p>8.将此链接填上点击提交，下面出现成功即可，谷歌收录很快，几个小时就会收录成功了<br>9.查看是否被收录，谷歌搜索以下内容即可：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">site:</span>域名<br>例如：<span class="hljs-attr">site:</span>www.zyxlfl.top<br></code></pre></td></tr></table></figure>
<h3 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h3><p>1.有错误请评论指出，谢谢，希望文章能够帮助到烂记性的自己和正在观看此博客的你。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>google</tag>
        <tag>sitemap</tag>
      </tags>
  </entry>
  <entry>
    <title>将域名解析到github仓库地址</title>
    <url>/2021/01/07/%E5%B0%86%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%88%B0github%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>实现不再通过繁杂的github地址githubname.github.io访问仓库，通过简短的域名访问，方便记忆，本篇就讲讲怎么将域名解析到github地址，实现域名访问仓库。</p>
<h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>1.国内的域名服务商有腾讯云，还有阿里云的等。下面以阿里云的为例：<br>2.购买了自己心仪的域名后，进入阿里云的管理控制台-域名与网站-域名就可以看到购买的域名此时的域名状态是未实名认证的，然后就是实名认证（一般需要2小时左右）。</p>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>1.首先获取自己 github 的二级域名的 IP地址，windows 下直接在 cmd 里 Ping 一下自己的github仓库地址就会得到 IP 地址<br>2.下面通过 DNS域名解析将购买的域名指向 github 的二级域名：<code>username.github.io</code>，点击确定即可，进入阿里云的管理控制台-域名与网站-云解析 DNS，进入域名的解析设置，点击添加记录，将得到的 IP 地址填到记录值一栏，记录类型为：A，主机记录为：@，线路为默认，点击确定即可<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/smbBct.jpg"><br>3.再次点击添加记录，记录类型为：CNAME，主机记录为：www，线路默认，记录值为你的仓库地址：<code>username.github.io</code>，点击确定即可<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/smq2qK.jpg"></p>
<h3 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h3><p>1.在你的hexo项目下，source 文件夹下面创建 CNAME 文件，没有后缀名的。<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/smLkZT.jpg"><br>1.在里面写上购买的域名。<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/smLiLV.jpg"></p>
<h3 id="github设置"><a href="#github设置" class="headerlink" title="github设置"></a>github设置</h3><p>1.在 github 上面，打开 username.github.io 项目的（Settings）设置，一直往下划，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/smLqp9.jpg"><br>2.找到GitHub Pages的 Custom domain，填上域名，勾选上https选项即可。<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/smLHfJ.jpg"><br>3.到此，一切就准备就绪了，现在就可以通过简洁的域名访问我们的仓库了。</p>
<h3 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h3><p>1.有错误请评论指出，谢谢，希望此文章能够帮助到烂记性的自己和正在观看此博客的你。</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>阿里云</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建记录日志-github托管</title>
    <url>/2020/08/07/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97-github%E6%89%98%E7%AE%A1/</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.登录github创建储存库，名称：github用户名.github.io<br><br>2.打开 Git-Bash 输入 cd blog进入目录<br><br>3.安装github部署插件，输入 cnpm install –save hexo-deployer-git 回车<br><br>4.打开配置_config.yml文件，路径：blog目录下<br><br>5.打开后，文件的最底部，在type:后面加上git（type: git）—冒号后面要打空格<br><br>6.然后换行加上repo:,接着在repo:后面加上储存库地址（repo: 此处为点击储存库然后复制浏览器地址栏的地址.git）—冒号后面要打空格<br><br>7.然后换行加上branh: master  —冒号后面要打空格 ，然后保存关闭<br><br>8.输入 hexo g 生成<br><br>9.输入 hexo d 部署上传即可<br><br>10.注意：hexo d 上传报错时，则是没有进行身份验证，此时分别输入 git config –global user.email “github账号” 以及 git config –global user.name “github用户名” 进行验证即可<br><br>11.然后重新部署即可<br><br>12.通过存储库名称即可实现托管进行云端访问 （例如： <a href="https://zyxlfl.top/">https://zyxlfl.top</a> ）<br></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建记录日志-基础搭建</title>
    <url>/2020/08/07/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97-%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="利用到的工具和环境"><a href="#利用到的工具和环境" class="headerlink" title="利用到的工具和环境"></a>利用到的工具和环境</h2><p>win10环境和hexo博客框架<br><br>工具下载链接位于文章尾部 <br><br>1.node.js <br><br>2.git <br></p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.安装node.js (建议安装v12.14.0版本)<br><br>2.成功后win+R打开运行，输入cmd，回车 <br><br>3.在控制台输入 node -v 可查看版本验证是否安装成功 <br><br>4.安装包管理器，输入 npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 回车，等待下载 <br><br>5.下载结束后输入cnpm回车，出现提示证明下载安装成功，输入cnpm -v可查看版本号 <br><br>6.开始安装博客全局框架，接着输入 cnpm install -g hexo-cli 回车，等待下载安装，安装完毕后输入 hexo -v 查看版本号验证是否安装成功 <br><br>7.安装git，详细步骤百度 git安装 会有详细安装教程（也可全部下一步傻瓜式安装，为了保险起见做好还是看一下安装教程） <br><br>8.安装完毕后，双击打开刚刚安装好的 Git-Bash （点击win的徽标按键，最近添加里面可以看到刚刚安装的git） <br><br>9.输入 mkdir blog 会创建一个文件夹blog在c盘里（路径：c/用户/你的电脑用户名/blog） <br><br>10.输入 cd blog （以下所有控制台操作都需进入blog目录下输入）<br><br>11.输入 hexo init （初始化博客）<br><br>12.输入 hexo s （启动博客）<br><br>13.出现 Hexo is running at <a href="http://localhost:4000/">http://localhost:4000</a> . Press Ctrl+C to stop.dir 证明启动成功，Ctrl+C的意思是停止博客运行<br><br>14.打开浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 即可访问初始博客<br><br>16.写博客指令输入 hexo n “文章名称” 回车，会创建一个只有名称的空文章<br><br>17.文章路径在 c盘/用户/你的电脑用户名/blog\source_posts里面，通过我的电脑打开，点击你的文章用记事本打开即可写博客，在—这3条杠下面写<br><br>18.清理一下博客，输入 hexo chean 回车<br><br>19.生成，输入 hexo g 回车<br><br>20.运行，输入 hexo s 回车<br><br>21.打开浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 即可。<br></p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>node.js — nodejs.org <br><br>git — <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> <br></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建记录日志-更换主题</title>
    <url>/2020/08/09/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.登录到<a href="https://hexo.io/themes">https://hexo.io/themes</a> 寻找到合适的开源主题<br><br>2.点击跳转到github下载源码zip<br><br>3.解压，放到 C:\用户\你的用户名\blog\themes 下 <br><br>4.打开blog目录下的 _config.yml 配置文件，打开找到 theme: 在其后写放到themes文件夹下的主题名字<br><br>5.打开 Git-Bash 输入 cd blog 进入目录<br><br>6.输入 hexo chean <br><br>7.输入 hexo g<br><br>8.输入 hexo d<br></p>
<h2 id="开源主题地址"><a href="#开源主题地址" class="headerlink" title="开源主题地址"></a>开源主题地址</h2><p><a href="https://hexo.io/themes">https://hexo.io/themes</a> <br></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>软件分享</title>
    <url>/2020/08/10/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h2 id="标题简介"><a href="#标题简介" class="headerlink" title="标题简介"></a>标题简介</h2><p>《本站提供所有软件-工具-文本-代码，无任何商业性质，均免费提供，不收取任何费用，因个人使用者因素造成的不良影响和后果均与本站以及本站长无关，如有侵权请联系删除！》<br><br>本帖放置以某度网盘链接形式的实用软件以及实用工具<br></p>
<p>本贴均为永久链接，如遇链接失效或文件损坏请移步关于页面添加我v联系我获取<br></p>
<h2 id="pe重装工具程序"><a href="#pe重装工具程序" class="headerlink" title="pe重装工具程序"></a>pe重装工具程序</h2><p>一键创建U盘pe系统，自定义程度高，内置重装系统工具，简洁无广告，系统更纯净:<br><br>链接：<a href="https://pan.baidu.com/s/1hkUYc04RycWXRrPcx5QHtA">https://pan.baidu.com/s/1hkUYc04RycWXRrPcx5QHtA</a> <br><br>提取码：o2y6 <br></p>
<h2 id="win10专业版系统镜像"><a href="#win10专业版系统镜像" class="headerlink" title="win10专业版系统镜像"></a>win10专业版系统镜像</h2><p>官方的纯净win10系统，无任何捆绑，使用下方激活工具一键激活使用更佳 <br><br>链接：<a href="https://pan.baidu.com/s/1hQ3M0LGBBE2AJlDHrzpJZA">https://pan.baidu.com/s/1hQ3M0LGBBE2AJlDHrzpJZA</a> <br><br>提取码：eng2 <br></p>
<h2 id="win10激活工具-任何版本的win10均可激活"><a href="#win10激活工具-任何版本的win10均可激活" class="headerlink" title="win10激活工具(任何版本的win10均可激活)"></a>win10激活工具(任何版本的win10均可激活)</h2><p>一键激活win10系统<br><br>链接：<a href="https://pan.baidu.com/s/1SHv7kHOX516dp9yjkimYKg">https://pan.baidu.com/s/1SHv7kHOX516dp9yjkimYKg</a> <br><br>提取码：uo7o <br></p>
<h2 id="office2019激活工具"><a href="#office2019激活工具" class="headerlink" title="office2019激活工具"></a>office2019激活工具</h2><p>一键激活office2019，需使用本博客提供的office2019方可激活，非本博客提供的office不保证能否激活成功！<br><br>链接：<a href="https://pan.baidu.com/s/12JwnkLsokJEcJt2sismSfQ">https://pan.baidu.com/s/12JwnkLsokJEcJt2sismSfQ</a> <br><br>提取码：2ml0 <br></p>
<h2 id="office2019"><a href="#office2019" class="headerlink" title="office2019"></a>office2019</h2><p>office2019专业版，包含office所有套件全家桶，使用上方激活工具可一键激活 <br><br>链接：<a href="https://pan.baidu.com/s/1MSbFFQZHhLCdcuzWmlutjQ">https://pan.baidu.com/s/1MSbFFQZHhLCdcuzWmlutjQ</a> <br><br>提取码：axxg <br></p>
<h2 id="win7系统镜像"><a href="#win7系统镜像" class="headerlink" title="win7系统镜像"></a>win7系统镜像</h2><p>官方的纯净win7系统，无任何捆绑，使用下方激活工具一键激活使用更佳 <br><br>链接：<a href="https://pan.baidu.com/s/1JddZm_6uFZp87sn3Up8ORA">https://pan.baidu.com/s/1JddZm_6uFZp87sn3Up8ORA</a> <br><br>提取码：m9q5<br></p>
<h2 id="win7激活工具"><a href="#win7激活工具" class="headerlink" title="win7激活工具"></a>win7激活工具</h2><p>kms激活工具，安装激活一气呵成，如遇报错缺少Microsoft.NET Framework 4，进一步安装此工具即可，Microsoft.NET工具位于下方<br><br>链接：<a href="https://pan.baidu.com/s/1Y_WT47l-C7VVUQHb7BnuhA">https://pan.baidu.com/s/1Y_WT47l-C7VVUQHb7BnuhA</a> <br><br>提取码：67q6<br></p>
<h2 id="Microsoft-NET-Framework-4-操作系统组件"><a href="#Microsoft-NET-Framework-4-操作系统组件" class="headerlink" title="Microsoft .NET Framework 4 操作系统组件"></a>Microsoft .NET Framework 4 操作系统组件</h2><p>win系统安装任何软件都有可能缺失此运行库，常见于激活工具的以及开发软件的运行缺失，下载安装即可<br><br>链接：<a href="https://pan.baidu.com/s/1wlKtIz9MZI5Hsott562yuw">https://pan.baidu.com/s/1wlKtIz9MZI5Hsott562yuw</a> <br><br>提取码：x4vh<br></p>
<h2 id="win8系统镜像"><a href="#win8系统镜像" class="headerlink" title="win8系统镜像"></a>win8系统镜像</h2><p>纯净的win8，好用！<br>链接：<a href="https://pan.baidu.com/s/17Yb4ftqFDrJXPjkGH240pg">https://pan.baidu.com/s/17Yb4ftqFDrJXPjkGH240pg</a> <br><br>提取码：fyu3 <br></p>
<h2 id="Fing开发端口检测工具-手机端"><a href="#Fing开发端口检测工具-手机端" class="headerlink" title="Fing开发端口检测工具(手机端)"></a>Fing开发端口检测工具(手机端)</h2><p>用于检测ip以及网站的开放端口（漏洞），开发者利器<br><br>链接：<a href="https://pan.baidu.com/s/1tBycaPj2kf6Q5SmJ1tRuuA">https://pan.baidu.com/s/1tBycaPj2kf6Q5SmJ1tRuuA</a><br><br>提取码：og6a<br></p>
<h2 id="office2010"><a href="#office2010" class="headerlink" title="office2010"></a>office2010</h2><p>比较老的office2010版本，自行斟酌<br><br>链接：<a href="https://pan.baidu.com/s/1Qi00JtlnbvKMcew5EGBnTA">https://pan.baidu.com/s/1Qi00JtlnbvKMcew5EGBnTA</a> <br><br>提取码：ox5r <br></p>
<h2 id="强力卸载工具"><a href="#强力卸载工具" class="headerlink" title="强力卸载工具"></a>强力卸载工具</h2><p>强大的卸载工具，一键卸载，自动清理残留，自动删除注册表，相对于手动要卸载的更干净<br><br>链接：<a href="https://pan.baidu.com/s/1cYOE1JvHZeJV8Khivf-NIg">https://pan.baidu.com/s/1cYOE1JvHZeJV8Khivf-NIg</a> <br><br>提取码：b01n<br></p>
<h2 id="win7网络驱动"><a href="#win7网络驱动" class="headerlink" title="win7网络驱动"></a>win7网络驱动</h2><p>重装win7的结束后有极大的可能会遇到网络连接不上，无法上网，安装此驱动即可恢复网络<br><br>链接：<a href="https://pan.baidu.com/s/1zBM09Q2jnu_94oceySFKDw">https://pan.baidu.com/s/1zBM09Q2jnu_94oceySFKDw</a><br><br>提取码：rrxt<br></p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现网站飘雪</title>
    <url>/2021/01/19/js%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E9%A3%98%E9%9B%AA/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>心血来潮，呼应一下南昌这个鬼天气，用js实现一下网站(本站基于hexo)的一个全局飘雪，本次暴雪将持续至开春。<br>效果预览：<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/s2R1tP.jpg"></p>
<h3 id="新建snow-js文件"><a href="#新建snow-js文件" class="headerlink" title="新建snow.js文件"></a>新建snow.js文件</h3><p>详细实现步骤：<br>1.在 \Hexo\themes\网站主题\source\js 目录下新建一个 snow.js 文件，粘贴以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 控制下雪 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">snowFall</span>(<span class="hljs-params">snow</span>) </span>&#123;<br>    <span class="hljs-comment">/* 可配置属性 */</span><br>    snow = snow || &#123;&#125;;<br>    <span class="hljs-built_in">this</span>.maxFlake = snow.maxFlake || <span class="hljs-number">200</span>;   <span class="hljs-comment">/* 最多片数 */</span><br>    <span class="hljs-built_in">this</span>.flakeSize = snow.flakeSize || <span class="hljs-number">10</span>;  <span class="hljs-comment">/* 雪花形状 */</span><br>    <span class="hljs-built_in">this</span>.fallSpeed = snow.fallSpeed || <span class="hljs-number">1</span>;   <span class="hljs-comment">/* 坠落速度 */</span><br>&#125;<br><span class="hljs-comment">/* 兼容写法 */</span><br>requestAnimationFrame = <span class="hljs-built_in">window</span>.requestAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.mozRequestAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.webkitRequestAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.msRequestAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.oRequestAnimationFrame ||<br>    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) </span>&#123; <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>); &#125;;<br> <br>cancelAnimationFrame = <span class="hljs-built_in">window</span>.cancelAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.mozCancelAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.webkitCancelAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.msCancelAnimationFrame ||<br>    <span class="hljs-built_in">window</span>.oCancelAnimationFrame;<br><span class="hljs-comment">/* 开始下雪 */</span><br>snowFall.prototype.start = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">/* 创建画布 */</span><br>    snowCanvas.apply(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">/* 创建雪花形状 */</span><br>    createFlakes.apply(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">/* 画雪 */</span><br>    drawSnow.apply(<span class="hljs-built_in">this</span>)<br>&#125;<br><span class="hljs-comment">/* 创建画布 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">snowCanvas</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">/* 添加Dom结点 */</span><br>    <span class="hljs-keyword">var</span> snowcanvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    snowcanvas.id = <span class="hljs-string">&quot;snowfall&quot;</span>;<br>    snowcanvas.width = <span class="hljs-built_in">window</span>.innerWidth;<br>    snowcanvas.height = <span class="hljs-built_in">document</span>.body.clientHeight;<br>    snowcanvas.setAttribute(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);<br>    <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].appendChild(snowcanvas);<br>    <span class="hljs-built_in">this</span>.canvas = snowcanvas;<br>    <span class="hljs-built_in">this</span>.ctx = snowcanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <span class="hljs-comment">/* 窗口大小改变的处理 */</span><br>    <span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        snowcanvas.width = <span class="hljs-built_in">window</span>.innerWidth;<br>        <span class="hljs-comment">/* snowcanvas.height = window.innerHeight */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 雪运动对象 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flakeMove</span>(<span class="hljs-params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.x = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * canvasWidth);   <span class="hljs-comment">/* x坐标 */</span><br>    <span class="hljs-built_in">this</span>.y = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * canvasHeight);  <span class="hljs-comment">/* y坐标 */</span><br>    <span class="hljs-built_in">this</span>.size = <span class="hljs-built_in">Math</span>.random() * flakeSize + <span class="hljs-number">2</span>;          <span class="hljs-comment">/* 形状 */</span><br>    <span class="hljs-built_in">this</span>.maxSize = flakeSize;                           <span class="hljs-comment">/* 最大形状 */</span><br>    <span class="hljs-built_in">this</span>.speed = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1</span> + fallSpeed;         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-built_in">this</span>.fallSpeed = fallSpeed;                         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-built_in">this</span>.velY = <span class="hljs-built_in">this</span>.speed;                             <span class="hljs-comment">/* Y方向速度 */</span><br>    <span class="hljs-built_in">this</span>.velX = <span class="hljs-number">0</span>;                                      <span class="hljs-comment">/* X方向速度 */</span><br>    <span class="hljs-built_in">this</span>.stepSize = <span class="hljs-built_in">Math</span>.random() / <span class="hljs-number">30</span>;                 <span class="hljs-comment">/* 步长 */</span><br>    <span class="hljs-built_in">this</span>.step = <span class="hljs-number">0</span>                                       <span class="hljs-comment">/* 步数 */</span><br>&#125;<br>flakeMove.prototype.update = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x,<br>        y = <span class="hljs-built_in">this</span>.y;<br>    <span class="hljs-comment">/* 左右摆动(余弦) */</span><br>    <span class="hljs-built_in">this</span>.velX *= <span class="hljs-number">0.98</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.velY &lt;= <span class="hljs-built_in">this</span>.speed) &#123;<br>        <span class="hljs-built_in">this</span>.velY = <span class="hljs-built_in">this</span>.speed<br>    &#125;<br>    <span class="hljs-built_in">this</span>.velX += <span class="hljs-built_in">Math</span>.cos(<span class="hljs-built_in">this</span>.step += <span class="hljs-number">.05</span>) * <span class="hljs-built_in">this</span>.stepSize;<br> <br>    <span class="hljs-built_in">this</span>.y += <span class="hljs-built_in">this</span>.velY;<br>    <span class="hljs-built_in">this</span>.x += <span class="hljs-built_in">this</span>.velX;<br>    <span class="hljs-comment">/* 飞出边界的处理 */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.x &gt;= canvas.width || <span class="hljs-built_in">this</span>.x &lt;= <span class="hljs-number">0</span> || <span class="hljs-built_in">this</span>.y &gt;= canvas.height || <span class="hljs-built_in">this</span>.y &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.reset(canvas.width, canvas.height)<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/* 飞出边界-放置最顶端继续坠落 */</span><br>flakeMove.prototype.reset = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">width, height</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.x = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * width);<br>    <span class="hljs-built_in">this</span>.y = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.size = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-built_in">this</span>.maxSize + <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">this</span>.speed = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1</span> + <span class="hljs-built_in">this</span>.fallSpeed;<br>    <span class="hljs-built_in">this</span>.velY = <span class="hljs-built_in">this</span>.speed;<br>    <span class="hljs-built_in">this</span>.velX = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span><br>flakeMove.prototype.render = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ctx</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">this</span>.y, <span class="hljs-number">0</span>, <span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">this</span>.y, <span class="hljs-built_in">this</span>.size);<br>    snowFlake.addColorStop(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="hljs-comment">/* 此处是雪花颜色，默认是白色 */</span><br>    snowFlake.addColorStop(<span class="hljs-number">.5</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="hljs-comment">/* 若要改为其他颜色，请自行查 */</span><br>    snowFlake.addColorStop(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="hljs-comment">/* 找16进制的RGB 颜色代码。 */</span><br>    ctx.save();<br>    ctx.fillStyle = snowFlake;<br>    ctx.beginPath();<br>    ctx.arc(<span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">this</span>.y, <span class="hljs-built_in">this</span>.size, <span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.PI * <span class="hljs-number">2</span>);<br>    ctx.fill();<br>    ctx.restore();<br>&#125;;<br><span class="hljs-comment">/* 创建雪花-定义形状 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createFlakes</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-built_in">this</span>.maxFlake,<br>        flakes = <span class="hljs-built_in">this</span>.flakes = [],<br>        canvas = <span class="hljs-built_in">this</span>.canvas;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; maxFlake; i++) &#123;<br>        flakes.push(<span class="hljs-keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="hljs-built_in">this</span>.flakeSize, <span class="hljs-built_in">this</span>.fallSpeed))<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 画雪 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drawSnow</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-built_in">this</span>.maxFlake,<br>        flakes = <span class="hljs-built_in">this</span>.flakes;<br>    ctx = <span class="hljs-built_in">this</span>.ctx, canvas = <span class="hljs-built_in">this</span>.canvas, that = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-comment">/* 清空雪花 */</span><br>    ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.width, canvas.height);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; maxFlake; e++) &#123;<br>        flakes[e].update();<br>        flakes[e].render(ctx);<br>    &#125;<br>    <span class="hljs-comment">/*  一帧一帧的画 */</span><br>    <span class="hljs-built_in">this</span>.loop = requestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        drawSnow.apply(that);<br>    &#125;);<br>&#125;<br><span class="hljs-comment">/* 调用及控制方法 */</span><br><span class="hljs-keyword">var</span> snow = <span class="hljs-keyword">new</span> snowFall(&#123;<span class="hljs-attr">maxFlake</span>:<span class="hljs-number">60</span>&#125;);<br>snow.start();<br></code></pre></td></tr></table></figure>
<h3 id="引用snow-js"><a href="#引用snow-js" class="headerlink" title="引用snow.js"></a>引用snow.js</h3><p>1.在 \Hexo\themes\网站主题\layout\layout.ejs 文件里引用即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>1.没有效果，请确认网页是否已载入JQurey，如果没有请在下雪代码之前引入JQ即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>利用github+jsDelivr搭建图床</title>
    <url>/2021/01/23/%E5%88%A9%E7%94%A8github-jsDelivr%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>图床是什么？图床就是图片存放的地址，用来节省服务器的资源，也可以变相的提升网站加载速度<br><br>你是否正在遭遇以下问题：<br>1.在用静态博客网站写文章，图片不知怎么保存，保存在哪里<br>2.网上复制的心仪图片链接，用着用着某一天就失效了<br>3.特意花钱租个云服务器托管图片，划不来，而且上传操作好繁琐<br>4.市面上形形色色的免费图床，但都有时间期限，要么就是速度慢，存储空间小，有的还限流量<br><br>现在可以利用jsdelivr加速github仓库来实现图床，无论是否使用jsdelivr你都可以利用github搭建一个图床，但缺点是国内加载速度非常慢，严重影响我们的需求，为此我们还需要利用jsdelivr的cdn加速，jsdelivr在国内的节点有上百个，这样我们就得到了一个访问速度贼快，且免费，空间无限的一个图床。<br><br>下面就是教程了，有疑问有错误请评论指出，谢谢，仅以此文章帮助烂记性的自己和正在观看此博客的你。</p>
<h3 id="新建github仓库用来存储图片"><a href="#新建github仓库用来存储图片" class="headerlink" title="新建github仓库用来存储图片"></a>新建github仓库用来存储图片</h3><p>1.登录你的 github 账号，<a href="https://github.com/">点击跳转登录</a>，右上角加号处点击此选项，创建一个新的仓库<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/gt.jpg"><br>2.详细设置<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/gtt.png"><br>3.此仓库你可以上传你的图片，用来达到存储的目的</p>
<h3 id="利用jsdelivr加速访问"><a href="#利用jsdelivr加速访问" class="headerlink" title="利用jsdelivr加速访问"></a>利用jsdelivr加速访问</h3><p>1.现在我们直接访问图片的链接时，速度是很慢的，所以我们需要利用jsdelivr加速访问我们的图片<br>2.假设我们的仓库中有一张<code>test.png</code>的图片<br>3.使用github的链接直接访问是这样访问的<code>https://github.com/github用户名/仓库名/raw/master/test.png</code>，经过测试得知，加载速度是非常不理想的，此时将图片链接放入我们的网站内，将会导致网页加载速度十分缓慢，图片会一直在加载状态<br>4.现在使用jsdelivr访问非常简单，即把图片地址链接域名改为 CDN 的域名，是这样的访问格式，<code>https://cdn.jsdelivr.net/gh/github用户名/仓库名@master/test.png</code>，经过测试，现在的访问速度已经起飞了</p>
<h3 id="利用PicGo工具便捷管理图片"><a href="#利用PicGo工具便捷管理图片" class="headerlink" title="利用PicGo工具便捷管理图片"></a>利用PicGo工具便捷管理图片</h3><p>1.前往picgo的GitHub仓库下载此工具，<a href="https://github.com/Molunerfinn/PicGo">点击前往下载</a>，如果下载速度太慢，科学上网下载会快一点，下载好后安装即可<br>2.然后，在 github 上创建一个 token1，点击右上角账号上的 settings<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/1714.png"><br>3.然后左侧点击 developer settings ，再点击 personal access tokens ，然后点击 generate new token<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/1714084-20201031122011123-386794180.png"><br>4.Note 用来说明你创建 token 的用途，然后 scopes 只需要选 repo 的所有选项即可<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/1714084-20201031122011409-863250092.png"><br>5.最后拉到底部，点击 generate token ，即可成功<br>6.找个地方记下这一串 token，等会需要用到。（如果没有记住，等再查看时就只能重新生成了）<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/1714084-20201031122011850-1358770775.png"><br>7.打开picgo工具进行配置<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210123171058.jpg"></p>
<ul>
<li>在 PicGo 中，找到图床设置 -&gt; GitHub图床。</li>
<li>仓库名即为你的github账号/图片仓库名</li>
<li>分支名就用默认的 master</li>
<li>Token 就填写刚才我们生成的 Token</li>
<li>存储路径如果需要指定子目录可以填写例如 img/ 。我这里没有填，就会上传到我图片仓库的根目录。</li>
<li>自定义域名就填写 jsDelivr 的域名，<code>https://cdn.jsdelivr.net/gh/github用户名/仓库名@master</code></li>
<li>最后设为默认图床，下次在 typora 上传图片就会自动上传到 github 图床了</li>
</ul>
<h3 id="总结-便捷使用方法"><a href="#总结-便捷使用方法" class="headerlink" title="总结-便捷使用方法"></a>总结-便捷使用方法</h3><p>1.点击上传图片，此时如果你上面的配置正确，上传的图片将会同步至github仓库内<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210123171400.jpg"><br>2.点击相册，可见你的图片，点击此按钮，即可复制图片链接<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210123171422.jpg"><br>3.你也可以指定上传后的链接格式<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210123171756.jpg"><br>4.得到链接后，你就可以尽情的使用了，加载速度十分迅速，白嫖真香，以后想要存图片就上传，接着复制链接出来使用，非常的方便</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>jsDelivr</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo高度自定义友链</title>
    <url>/2021/01/24/hexo%E9%AB%98%E5%BA%A6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8B%E9%93%BE/</url>
    <content><![CDATA[<p>实现对hexo的友链高度自定义，可以在下面放置评论区，以及md格式文字</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>1.关闭主题配置里面的links<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210124210119.jpg"><br>2.新建一个links页面<br><code>hexo new page links</code><br>3.位于<code>source</code>文件下可见links的md文件下自定义显示的页面了，进入修改<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210124210317.jpg"><br>4.添加此两项，意为开启评论以及links样式<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210124210419.jpg"><br>5.进入<code>links.ejs</code>修改，在其末尾处添加以下代码，使评论功能和md格式文字生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span>(page.comments &amp;&amp; theme.post.comments.enable) &#123; %&gt;<br>  &lt;!-- Comments --&gt;<br>  &lt;article <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;comments&quot;</span> id=<span class="hljs-string">&quot;comments&quot;</span>&gt;<br>    &lt;% <span class="hljs-keyword">var</span> type = <span class="hljs-string">&#x27;_partial/comments/&#x27;</span> + theme.post.comments.type %&gt;<br>    &lt;%- partial(type) %&gt;<br>  &lt;/article&gt;<br>&lt;% &#125; %&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-content&quot;</span>&gt;<br>  &lt;%- page.content %&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>
<p>6.现在即可在links的md文件下自定义显示的界面了<br><img src="https://cdn.jsdelivr.net/gh/liaoblog/img@master/blogpage/Dingtalk_20210124211454.jpg"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>ejs</tag>
        <tag>comment</tag>
      </tags>
  </entry>
</search>
